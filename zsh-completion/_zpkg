#compdef zpkg

_commands=(
    '-h:show help of this command.'
    '--help:show help of this command.'
    '-V:show version of this.'
    '--version:show version of this command.'
     'ls-available:list the available packages.'
    'ls-installed:list the installed packages.'
    'ls-outdated:list the installed packages which can be upgraded.'
    'is-available:is the given package available.'
    'is-installed:is the given package installed.'
    'is-outdated:is the given package outdated.'
   'search:search packages can be installed.'
    'tree:list files of the given installed package in a tree-like format.'
    'info:show infomation of the given package or all available packages.'
    'formula:create, delete, rename, view, edit the formula of the given package.'
    'formula-repo:add, delete, list the formula-repos.'
    'install:install packages.'
    'reinstall:reinstall packages.'
    'uninstall:uninstall packages.'
    'cleanup:cleanup the unused cache.'
    'update:update the formula repository.'
    'upgrade:upgrade the outdated packages or this software.'
    'fetch:download formula resources of the given package to the cache.'
    'homepage:show or open the homepage of the given package or the this project.'
    'integrate:integrate zsh completions.'
    'env:show current machine os and environment variables.'
    'depends:show the depends of the given package.'
    'prefix:show the installation direcotory of the given package or the home dir of this project.'
    'pack:pack the given installed package.'
    'logs:show logs of the given installed package.'
    'nproc:print the number of processing units available'
    'ldd:list dynamic dependencies.'
    'gen-github-workflows:generate github workflows.'
)

function _zpkg_commands() {
    _describe 'command' _commands
}

function _zpkg_available_packages() {
    local -a _available_packages
    _available_packages=($(zpkg ls-available 2>/dev/null))
    _describe 'available-packages' _available_packages
}

function _zpkg_installed_packages() {
    local -a _installed_packages
    _installed_packages=($(zpkg ls-installed 2>/dev/null))
    _describe 'installed-packages' _installed_packages
}

function _zpkg_outdated_packages() {
    local -a _outdated_packages
    _outdated_packages=($(zpkg ls-outdated 2>/dev/null))
    _describe 'outdated-packages' _outdated_packages
}

function _zpkg() {
    local context state state_descr line
    typeset -A opt_args

    _arguments \
        '1: :_zpkg_commands' \
        '*:: :->option'

    case $state in
        option)
            case $words[1] in
                formula-repo)
                    _arguments \
                        ':action:(add del list)' \
                        '*:: :->action'
                    case $state in
                        action)
                            case $words[1] in
                                del)
                                    _arguments '1:repo-name:($(zpkg formula-repo list | cut -d= -f1))' 
                                    ;;
                            esac
                    esac
                    ;;
                formula)
                    _arguments \
                        ':action:(create delete rename view edit list)' \
                        '*:: :->action'
                    case $state in
                        action)
                            case $words[1] in
                                delete|rename|edit)
                                    _arguments '1:package-name:_zpkg_available_packages'
                                    ;;
                                view)
                                    _arguments \
                                        '1:package-name:_zpkg_available_packages' \
                                        '--paging=-[when use pager]:paging:(auto always never)'
                                    ;;
                            esac
                    esac
                    ;;
                integrate)
                    _arguments \
                        '1:what:(zsh)' \
                        '-x[trace execution of commands]' \
                        '--china[use china mirror url]'
                    ;;
                info)
                    _arguments \
                        '1:package-name:(@all $(zpkg ls-available))' \
                        '*:: :->info-subcommand'
                                                    case $state in
                                                        info-subcommand)
                                                            case $words[1] in
                                                                @all) _arguments '--json[output format is json]' ;;
                                                                *) _arguments '1:key:(summary webpage version license src.git src.url src.sum dep.cmd dep.pkg patches cdefine ccflags xxflags ldflags sourced binsrcd bsystem installed-dir installed-metadata installed-files installed-datetime-unix installed-datetime-formatted installed-pkg-version --json)'
                                                            esac
                                                        esac
                        ;;
                fetch|depends)
                    _arguments ':package-name:_zpkg_available_packages' ;;
                prefix)
                    _arguments ':package-name:_zpkg_installed_packages' ;;
                pack)
                    _arguments \
                        '1:package-name:_zpkg_installed_packages' \
                        '--type=-[output file type]:type:(7z zip tar.gz tar.xz tar.bz2)'
                    ;;
                homepage)
                    _arguments \
                        ':package-name:_zpkg_available_packages' \
                        '--open[open in the web browser]'
                                                    ;;
                tree)
                    _arguments \
                        '1:package-name:_zpkg_installed_packages' \
                        '-L[level]:level:(3)'
                    ;;
                logs)
                    _arguments \
                        '1:package-name:_zpkg_installed_packages'
                    ;;
                install)
                    _arguments \
                        ':package-name:_zpkg_available_packages' \
                        '--jobs=-[set the number of jobs you can run in parallel with make]:jobs:(1 2 3 4 5 6 7 8 9)' \
                        '--dry-run[dry-run]' \
                        '--keep-working-dir[do not delete working-dir even if installed success]' \
                        '(--verbose -v)'{--verbose,-v}'[verbose output log]' \
                        '(--debug -d)'{--debug,-d}'[debug]' \
                        '(--xtrace -x)'{--xtrace,-x}'[trace execution of commands]'
                    ;;
                reinstall)
                    _arguments \
                        ':package-name:_zpkg_installed_packages' \
                        '--jobs=-[set the number of jobs you can run in parallel with make]:jobs:(1 2 3 4 5 6 7 8 9)' \
                        '(--verbose -v)'{--verbose,-v}'[verbose output log]' \
                        '(--debug -d)'{--debug,-d}'[debug]' \
                        '(--xtrace -x)'{--xtrace,-x}'[trace execution of commands]'
                    ;;
                upgrade)
                    _arguments \
                        '1:package-name:(@self $(zpkg ls-outdated))' \
                        '*:: :->upgrade-subcommand'
                                                    case $state in
                                                        upgrade-subcommand)
                                                            case $words[1] in
                                                                @self)
                                                                    _arguments \
                        '-x[trace execution of commands]' \
                        '--china[use china mirror url]'
                    ;;
                                                                *)
                                                                _arguments \
                        ':package-name:_zpkg_outdated_packages' \
                        '--jobs=-[set the number of jobs you can run in parallel with make]:jobs:(1 2 3 4 5 6 7 8 9)' \
                        '(--verbose -v)'{--verbose,-v}'[verbose output log]' \
                        '(--debug -d)'{--debug,-d}'[debug]' \
                        '(--xtrace -x)'{--xtrace,-x}'[trace execution of commands]'

                                                            esac
                                                        esac
                                                    ;;
                uninstall)
                    _arguments '*:package-name:_zpkg_installed_packages'
                    ;;
                is-available)
                    _arguments \
                        '1:package-name:_zpkg_available_packages' \
                        '2:condition-operator:(eq ne ge gt le lt)'
                    ;;
                is-installed)
                    _arguments \
                        '1:package-name:_zpkg_installed_packages'
                                                    ;;
                is-outdated)
                    _arguments \
                        '1:package-name:_zpkg_outdated_packages'
                                                    ;;
                ldd)
                    _arguments \
                        '1:package-name:_zpkg_installed_packages' \
                        '2:type:(bin lib)'
                    ;;
                gen-github-workflows)
                    _arguments \
                        '--group-size=-[set the group size]:group-size:(50 40 30 20)' \
                        '--output-dir=-[set the output dir]:output-dir:{_files -/}'
                    ;;
                *);;
            esac
            ;;
        *);;
    esac
}

_zpkg $@
